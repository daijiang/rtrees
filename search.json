[{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://daijiang.github.io/rtrees/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Daijiang Li  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. rtrees Copyright (C) 2019 Daijiang Li This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://daijiang.github.io/rtrees/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daijiang Li. Author, maintainer.","code":""},{"path":"https://daijiang.github.io/rtrees/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li Daijiang. rtrees: R package assemble phylogenetic trees mega-trees. 2023. Ecography. https://github.com/daijiang/rtrees","code":"@Article{,   title = {rtrees: an R package to assemble phylogenetic trees from megatrees},   author = {Daijiang Li},   journal = {Ecography},   year = {2023},   url = {https://github.com/daijiang/rtrees}, }"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"rtrees","dir":"","previous_headings":"","what":"Deriving Phylogenies from Synthesis Trees","title":"Deriving Phylogenies from Synthesis Trees","text":"goal rtrees remove barriers derive phylogenies list species mega-trees. Basically, Phylomatic .","code":""},{"path":"https://daijiang.github.io/rtrees/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deriving Phylogenies from Synthesis Trees","text":"code also install one dependency {megatrees}, R data package hosts megatrees used .","code":"options(repos = c(   rtrees = 'https://daijiang.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) install.packages(\"rtrees\")"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"shinny-app","dir":"","previous_headings":"","what":"Shinny app","title":"Deriving Phylogenies from Synthesis Trees","text":"also Shinny app get phylogenies without using R. However, given can afford free plan, number species inserted megatrees limited 1,000.","code":""},{"path":"https://daijiang.github.io/rtrees/index.html","id":"mega-trees","dir":"","previous_headings":"","what":"Mega-trees","title":"Deriving Phylogenies from Synthesis Trees","text":"Currently, rtrees provides mega-trees following taxonomic groups: amphibian, bird, fish, mammal, plant, reptile, shark_ray. mega-trees (subset 100 posterior phylogenies; 50 fish reduce package size) saved data package {megatrees}.","code":""},{"path":"https://daijiang.github.io/rtrees/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage examples","title":"Deriving Phylogenies from Synthesis Trees","text":"","code":"library(rtrees) library(ape)"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"prepare-species-data-frame-optional","dir":"","previous_headings":"","what":"Prepare species data frame (optional)","title":"Deriving Phylogenies from Synthesis Trees","text":"species lists want phylogeny provided data frame least 3 columns: family, genus, species. order matter. example fish. plant, fish, bird, mammal, possible prepare sp_list function sp_list_df(); though check results. possible just provide speices character vector taxon groups (genus species list presented phylogeny).","code":"test_fish_list = tibble::tibble(   species = c(\"Serrasalmus_geryi\", \"Careproctus_reinhardti\", \"Gobiomorphus_coxii\",                \"Periophthalmus_barbarus\", \"Prognichthys_glaphyrae\", \"Barathronus_bicolor\",                \"Knipowitschia_croatica\", \"Rhamphochromis_lucius\", \"Neolissochilus_tweediei\",                \"Haplochromis_nyanzae\", \"Astronesthes_micropogon\", \"Sanopus_reticulatus\"),   genus = c(\"Serrasalmus\", \"Careproctus\", \"Gobiomorphus\", \"Periophthalmus\",             \"Prognichthys\", \"Barathronus\", \"Knipowitschia\", \"Rhamphochromis\",              \"Neolissochilus\", \"Haplochromis\", \"Astronesthes\", \"Sanopus\"),   family = c(\"Serrasalmidae\", \"Liparidae\", \"Eleotridae\", \"Gobiidae\",               \"Exocoetidae\", \"Aphyonidae\", \"Gobiidae\", \"Cichlidae\",               \"Cyprinidae\", \"Cichlidae\", \"Stomiidae\", \"Batrachoididae\") ) test_fish_list #> # A tibble: 12 × 3 #>    species                 genus          family         #>    <chr>                   <chr>          <chr>          #>  1 Serrasalmus_geryi       Serrasalmus    Serrasalmidae  #>  2 Careproctus_reinhardti  Careproctus    Liparidae      #>  3 Gobiomorphus_coxii      Gobiomorphus   Eleotridae     #>  4 Periophthalmus_barbarus Periophthalmus Gobiidae       #>  5 Prognichthys_glaphyrae  Prognichthys   Exocoetidae    #>  6 Barathronus_bicolor     Barathronus    Aphyonidae     #>  7 Knipowitschia_croatica  Knipowitschia  Gobiidae       #>  8 Rhamphochromis_lucius   Rhamphochromis Cichlidae      #>  9 Neolissochilus_tweediei Neolissochilus Cyprinidae     #> 10 Haplochromis_nyanzae    Haplochromis   Cichlidae      #> 11 Astronesthes_micropogon Astronesthes   Stomiidae      #> 12 Sanopus_reticulatus     Sanopus        Batrachoididae sp_list_df(sp_list = c(\"Periophthalmus_barbarus\", \"Barathronus_bicolor\"),            taxon = \"fish\") #> # A tibble: 2 × 4 #>   species                 genus          family     Family #>   <chr>                   <chr>          <chr>      <chr>  #> 1 Periophthalmus_barbarus Periophthalmus Gobiidae   <NA>   #> 2 Barathronus_bicolor     Barathronus    Aphyonidae <NA>"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"get-phylogeny-from-one-megatree","dir":"","previous_headings":"","what":"Get phylogeny from one megatree","title":"Deriving Phylogenies from Synthesis Trees","text":"species list ready, can derive phylogeny tree_fish.  matter whether show_grafted ‘TRUE’ ‘FALSE’, grafting information saved along phylogeny can extracted following code:","code":"test_tree = get_tree(sp_list = test_fish_list,                      taxon = \"fish\",                      scenario = \"at_basal_node\",                      show_grafted = TRUE) #>  #> 6 species added at genus level (*) #> 1 species have no co-family species in the mega-tree, skipped #> (if you know their family, prepare and edit species list with `rtrees::sp_list_df()` may help):  #> Barathronus_bicolor plot(test_tree, no.margin = T) # or use rtrees::get_graft_status(test_tree) test_tree$graft_status #> # A tibble: 12 × 3 #>    tip_label                species                 status                       #>    <chr>                    <chr>                   <chr>                        #>  1 Prognichthys_glaphyrae   Prognichthys_glaphyrae  exisiting species in the me… #>  2 Rhamphochromis_lucius*   Rhamphochromis_lucius   grafted at genus level       #>  3 Haplochromis_nyanzae*    Haplochromis_nyanzae    grafted at genus level       #>  4 Knipowitschia_croatica*  Knipowitschia_croatica  grafted at genus level       #>  5 Periophthalmus_barbarus  Periophthalmus_barbarus exisiting species in the me… #>  6 Gobiomorphus_coxii       Gobiomorphus_coxii      exisiting species in the me… #>  7 Careproctus_reinhardti   Careproctus_reinhardti  exisiting species in the me… #>  8 Sanopus_reticulatus*     Sanopus_reticulatus     grafted at genus level       #>  9 Astronesthes_micropogon* Astronesthes_micropogon grafted at genus level       #> 10 Neolissochilus_tweediei* Neolissochilus_tweediei grafted at genus level       #> 11 Serrasalmus_geryi        Serrasalmus_geryi       exisiting species in the me… #> 12 <NA>                     Barathronus_bicolor     skipped as no co-family in …"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"get-a-set-of-phylogenies-from-multiple-posterior-megatrees","dir":"","previous_headings":"","what":"Get a set of phylogenies from multiple posterior megatrees","title":"Deriving Phylogenies from Synthesis Trees","text":"function rtrees::get_tree() can also work set posterior megatrees option use parallel computing whole process. default number cores used available number cores minus 2 (users can still perform tasks computers time). output set generated phylogenies class multiPhylo; number derived phylogenies input megatrees. scenario, can use exactly code described . example, want use 100 randomly selected posterior phylogenies ~32k fish species, can add fish_tree = \"-taxon.","code":"test_tree2 = get_tree(sp_list = test_fish_list,                      taxon = \"fish\",                      scenario = \"at_basal_node\",                      show_grafted = TRUE,                      fish_tree = \"all-taxon\") #> Wow, all species are already in the mega-tree! test_tree2 #> 50 phylogenetic trees plot(ladderize(test_tree2[[1]]), no.margin = T)"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"add-tips-to-user-provided-trees","dir":"","previous_headings":"","what":"Add tips to user provided trees","title":"Deriving Phylogenies from Synthesis Trees","text":"also possible derive phylogeny based user provided tree. can particularly useful things like Acer_spp want insert basal node genus.  Pay attention warning message . genera species list presented megatree, impossible find recent ancestor genus family missing megatree. Therefore, user-provided phylogenies, recommended steps: Get classification information (data frame two columns: genus family) genera presented species list megatree. Prepare species list data frame three columns: species, genus, family using classification information. Process megatree using function processed_tree = rtrees::add_root_infor(tree, classification). Pass processed megatree rtrees::get_tree(sp_list_data_frame, processed_tree) derive phylogeny species list.","code":"test_tree = ape::read.tree(text = \"(((((((((Potentilla_intermedia:1.156097,Potentilla_gracilis:1.156097):9.169741,Potentilla_bipinnatifida:10.325839):10.466967,Potentilla_sterilis:20.792806):11.333216,Fragaria_virginiana:32.126022):6.026567,(((((Rosa_setigera:3.434279,Rosa_arkansana:3.434279):1.991106,Rosa_spinosissima:5.425386):0.993924,Rosa_acicularis:6.419309):6.730804,(Rosa_micrantha:0.188519,Rosa_canina:0.188519):12.961594):23.677485,(Agrimonia_gryposepala:4.730863,Agrimonia_parviflora:4.730863):32.096735):1.324992):6.47604,(Geum_urbanum:11.153303,Geum_rivale:11.153303):33.475326):1.449852,((((((((Rubus_semisetosus:3.10529,Rubus_glandicaulis:3.10529):0.957584,Rubus_steelei:4.062873):0.398394,Rubus_cuneifolius:4.461267):2.271628,Rubus_vagus:6.732895):0.023439,Rubus_superioris:6.756333):0.020104,(Rubus_multifer:4.287114,Rubus_elegantulus:4.287115):2.489323):0.025475,((Rubus_laciniatus:0.125186,Rubus_bifrons:0.125186):0.11903,Rubus_praecox:0.244216):6.557697):11.571849,(Rubus_parviflorus:14.85915,Rubus_odoratus:14.85915):3.514612):27.704718):16.915234,Filipendula_rubra:62.993714):13.354116,((((((((((Crataegus_dissona:0.081863,Crataegus_florifera:0.081863):0.49838,Crataegus_fulleriana:0.580243):1.434261,Crataegus_crus-galli:2.014503):0.177737,Crataegus_chrysocarpa:2.192239):0.051159,Crataegus_uniflora:2.243399):0.438351,Crataegus_persimilis:2.68175):4.697259,((Malus_toringo:6.472694,Malus_ioensis:6.472693):0.772012,Chaenomeles_speciosa:7.244705):0.134305):1.72489,Pyrus_communis:9.1039):0.313393,Amelanchier_spicata:9.417293):40.039557,((((((Prunus_pumila:6.189944,Prunus_nigra:6.189945):0.37487,Prunus_pensylvanica:6.564815):4.856241,(Prunus_padus:4.816999,Prunus_serotina:4.817):6.604057):29.162527,Sorbaria_sorbifolia:40.583584):2.924475,Rhodotypos_scandens:43.50806):2.718224,(Spiraea_X_bumalda:25.921582,Aruncus_dioicus:25.921583):20.304701):3.230567):26.89098);\")  test_tree_sp = c(\"Rosa_sp\", \"Rubus_sp\", \"Amelanchier_sp\", \"Prunus_sp\", \"Sorbus_sp\", \"Potentilla_sp\",   \"Potentilla_intermedia\", \"Potentilla_gracilis\", \"Potentilla_bipinnatifida\", \"Potentilla_sterilis\", \"Fragaria_virginiana\", \"Rosa_setigera\", \"Rosa_arkansana\", \"Rosa_spinosissima\", \"Rosa_acicularis\", \"Rosa_micrantha\", \"Rosa_canina\", \"Agrimonia_gryposepala\", \"Agrimonia_parviflora\", \"Geum_urbanum\", \"Geum_rivale\", \"Rubus_semisetosus\", \"Rubus_glandicaulis\", \"Rubus_steelei\", \"Rubus_cuneifolius\", \"Rubus_vagus\", \"Rubus_superioris\", \"Rubus_multifer\", \"Rubus_elegantulus\", \"Rubus_laciniatus\", \"Rubus_bifrons\", \"Rubus_praecox\", \"Rubus_parviflorus\", \"Rubus_odoratus\", \"Filipendula_rubra\", \"Crataegus_dissona\", \"Crataegus_florifera\", \"Crataegus_fulleriana\", \"Crataegus_crus-galli\", \"Crataegus_chrysocarpa\", \"Crataegus_uniflora\", \"Crataegus_persimilis\", \"Malus_toringo\", \"Malus_ioensis\", \"Chaenomeles_speciosa\", \"Pyrus_communis\", \"Amelanchier_spicata\", \"Prunus_pumila\", \"Prunus_nigra\", \"Prunus_pensylvanica\", \"Prunus_padus\", \"Prunus_serotina\", \"Sorbaria_sorbifolia\", \"Rhodotypos_scandens\", \"Spiraea_X_bumalda\", \"Aruncus_dioicus\")  plot(get_tree(sp_list = test_tree_sp, tree = test_tree, taxon = \"plant\",               show_grafted = T, tree_by_user = T), type = \"fan\") #> Not all genus can be found in the phylogeny. #> Warning: For user provided phylogeny, without a classification for all genus of species in the phylogeny, #>               it is unlikely to find the most recent ancestor for genus and family; here we proceed the phylogeny #>               by adding root information for genus and family that can be found in the phylogeny or species list but #>               we recommend to prepare the phylogeny using `add_root_info()` with a classification #>               data frame with all tips first. #>  #> 5 species added at genus level (*) #> 1 species added at family level (**)"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"bind-missing-species-to-specified-places","dir":"","previous_headings":"","what":"Bind missing species to specified places","title":"Deriving Phylogenies from Synthesis Trees","text":"also possible specify particular species bind specifying columns close_sp /close_genus.","code":"test_tree_sp_df = sp_list_df(test_tree_sp, \"plant\") test_tree_sp_df$close_sp = NA test_tree_sp_df$close_sp[1] = \"Rosa_acicularis\" # bind Rosa_sp to here plot(get_tree(sp_list = test_tree_sp_df, tree = test_tree, taxon = \"plant\",               show_grafted = T, tree_by_user = T), type = \"fan\") #> Not all genus can be found in the phylogeny. #> Warning: For user provided phylogeny, without a classification for all genus of species in the phylogeny, #>               it is unlikely to find the most recent ancestor for genus and family; here we proceed the phylogeny #>               by adding root information for genus and family that can be found in the phylogeny or species list but #>               we recommend to prepare the phylogeny using `add_root_info()` with a classification #>               data frame with all tips first. #>  #> 5 species added at genus level (*) #> 1 species added at family level (**)"},{"path":"https://daijiang.github.io/rtrees/index.html","id":"some-notes","dir":"","previous_headings":"","what":"Some notes","title":"Deriving Phylogenies from Synthesis Trees","text":"tree specified, taxon can ignored genus species list presented phylogeny. species co-family species mega-tree, skipped. grafted genus level, one *. grafted family level, two *s (.e., **). random_below_basal randomly select downstream node attach new tip. one species mega-tree genus/family new tip, new tip grafted middle species’ branch scenarios. tree can user provided tree, , set tree_by_user = TRUE. See ?get_tree details.","code":""},{"path":"https://daijiang.github.io/rtrees/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Deriving Phylogenies from Synthesis Trees","text":"Feel free test . Contributions suggestions welcome. can open issue send pull request.","code":""},{"path":"https://daijiang.github.io/rtrees/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Deriving Phylogenies from Synthesis Trees","text":"Li Daijiang. (2023). rtrees: R package assemble phylogenetic trees megatrees. Ecography.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/add_root_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Add genus and family basal/root node information to a phylogeny — add_root_info","title":"Add genus and family basal/root node information to a phylogeny — add_root_info","text":"Based classification tips, find basal root node genus family. information can later used graft new tips onto phylogeny. function can used process user provided tree.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/add_root_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add genus and family basal/root node information to a phylogeny — add_root_info","text":"","code":"add_root_info(   tree,   classification,   process_all_tips = TRUE,   genus_list = NULL,   family_list = NULL,   show_warning = FALSE )"},{"path":"https://daijiang.github.io/rtrees/reference/add_root_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add genus and family basal/root node information to a phylogeny — add_root_info","text":"tree phylogeny class \"phylo\". classification data frame 2 columns: genus, family. include genus tips tree belong . process_all_tips Whether find basal nodes tips? Default TRUE. genus_list optinoal subset list genus find root information. family_list optinoal subset list family find root information. species co-genus tree. show_warning Whether print warning information non-monophyletic clades .","code":""},{"path":"https://daijiang.github.io/rtrees/reference/add_root_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add genus and family basal/root node information to a phylogeny — add_root_info","text":"phylogeny basal nodes information attached.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind a tip to a phylogeny — bind_tip","title":"Bind a tip to a phylogeny — bind_tip","text":"Graft tip phylogeny location specified.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind a tip to a phylogeny — bind_tip","text":"","code":"bind_tip(   tree = NULL,   where,   tip_label,   frac = 0.5,   new_node_above = FALSE,   node_label = NULL,   return_tree = TRUE,   tree_tbl = NULL,   node_heights = NULL,   use_castor = TRUE,   sequential = TRUE )"},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind a tip to a phylogeny — bind_tip","text":"tree phylogeny, class \"phylo\". Location insert tip. can either tip label node label, must characters. location name, assign first. tip_label Name new tip inserted. frac fraction branch length, must 0 1. applies location tip new_node_above = TRUE. distance new inserted node location (node tip) branch length location * (1 - frac). new_node_above Whether insert new node location node? Default FALSE, attach new tip location node. node_label Name new node created. applies location tip new_node_above = TRUE. return_tree Whether return phylogeny class \"phylo?\" Default TRUE. Otherwise, return data frame. tree_tbl tibble version tree, optional. node_heights named numeric vector node hieghts tree, generated ape::branching.times(). also optional tree specified; required tree_tbl specified. use_castor Whether use package castor get phylogeny node; faster tidytree::offspring figure tip offsprings node. sequential Whether add tip sequential node number edge matrix. example, want bind tip clade node number tips clade 101 150. can set node id new tip 151 push remaining node id 1 current values. require us find node ids tips descents node want bind new tip , can time costly. Yet still sure whether necessary. Normally, node ids phylo class sequential. Therefore, default value TRUE. set FALSE, can just assign id new tip Ntip + 1 save time. addition, probably need order node column edge matrix every time.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind a tip to a phylogeny — bind_tip","text":"Either phylogeny data frame, can converted phylogeny later.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind a tip to a phylogeny — bind_tip","text":"","code":"if (FALSE) { library(rtrees) bind_tip(tree_plant_otl, \"N70407\", tip_label = \"test_sp\") tree_plant_otl_df = tidytree::as_tibble(tree_plant_otl) node_heights = ape::branching.times(tree_plant_otl) bind_tip(tree_tbl = tree_plant_otl_df, where = \"N70407\",           tip_label = \"test_sp\", node_heights = node_heights) }"},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind a tip to a phylogeny (data frame version) — bind_tip_df","title":"Bind a tip to a phylogeny (data frame version) — bind_tip_df","text":"Graft tip phylogeny location specified.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind a tip to a phylogeny (data frame version) — bind_tip_df","text":"","code":"bind_tip_df(   tree = NULL,   where,   tip_label,   frac = 0.5,   new_node_above = FALSE,   node_label = NULL,   return_tree = TRUE,   tree_tbl = NULL,   node_heights = NULL,   use_castor = FALSE )"},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind a tip to a phylogeny (data frame version) — bind_tip_df","text":"tree phylogeny, class \"phylo\". Location insert tip. can either tip label node label, must characters. location name, assign first. tip_label Name new tip inserted. frac fraction branch length, must 0 1. applies location tip new_node_above = TRUE. distance new inserted node location (node tip) branch length location * (1 - frac). new_node_above Whether insert new node location node? Default FALSE, attach new tip location node. node_label Name new node created. applies location tip new_node_above = TRUE. return_tree Whether return phylogeny class \"phylo?\" Default TRUE. Otherwise, return data frame. tree_tbl tibble version tree, optional. node_heights named numeric vector node hieghts tree, generated ape::branching.times(). also optional tree specified; required tree_tbl specified. use_castor Whether use package castor get phylogeny node; faster tidytree::offspring figure tip offsprings node.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind a tip to a phylogeny (data frame version) — bind_tip_df","text":"Either phylogeny data frame, can converted phylogeny later.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/bind_tip_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind a tip to a phylogeny (data frame version) — bind_tip_df","text":"","code":"if (FALSE) { library(rtrees) bind_tip(tree_plant_otl, \"N70407\", tip_label = \"test_sp\") tree_plant_otl_df = tidytree::as_tibble(tree_plant_otl) node_heights = ape::branching.times(tree_plant_otl) bind_tip(tree_tbl = tree_plant_otl_df, where = \"N70407\",           tip_label = \"test_sp\", node_heights = node_heights) }"},{"path":"https://daijiang.github.io/rtrees/reference/classifications.html","id":null,"dir":"Reference","previous_headings":"","what":"Classifications of species — classifications","title":"Classifications of species — classifications","text":"Genus family information different groups taxon. Plant classification information. sources include: + based V.PhyloMaker::nodes.info.1 + based Plant List + taxonlookup + Plants World online Fish classification information based FishBase. 4,825 genus file. https://fishtreeoflife.org/downloads/PFC_taxonomy.csv.xz Bee classification information Bee Tree Life. Note used 'Subfamily' nomenclature file \"family\" . genus' Subfamily missing, used Family. Bird classification information based BirdLife, resulted 2,391 genus. http://datazone.birdlife.org/species/taxonomy However, based taxonomy file Jetz et al. 2012 phylogeny, additional 117 genus file BirdLife. combined , leads 2,508 genus. Mammal classification information based PHYLACINE, 1,400 genus. https://github.com/MegaPast2Future/PHYLACINE_1.2/blob/master/Data/Taxonomy/Synonymy_table_valid_species_only.csv Additional genus Vertlife added . genus PHYLACINE Vertlife different family information, used family Vertlife found mostly accurate. Amphibian classification information VertLife. Reptile classification information largely wikipedia. Shark Ray classification information largely NCBI.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/classifications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classifications of species — classifications","text":"","code":"classifications"},{"path":"https://daijiang.github.io/rtrees/reference/classifications.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Classifications of species — classifications","text":"data frame three columns: genus, family, taxon (plant, fish, bird, mammal, amphibian, reptile, shark_ray, bee).","code":""},{"path":"https://daijiang.github.io/rtrees/reference/fmatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Faster match of vectors — %fin%","title":"Faster match of vectors — %fin%","text":"See fastmatch::%fin% details.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_graft_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract grafting status information as a data frame — get_graft_status","title":"Extract grafting status information as a data frame — get_graft_status","text":"Extract grafting status information data frame","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_graft_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract grafting status information as a data frame — get_graft_status","text":"","code":"get_graft_status(tree)"},{"path":"https://daijiang.github.io/rtrees/reference/get_graft_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract grafting status information as a data frame — get_graft_status","text":"tree phylogeny generated get_tree(...) trailing stars tip labels.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_graft_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract grafting status information as a data frame — get_graft_status","text":"tibble three columns: tip_label, species, status.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_one_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive a phylogeny from a mega-tree — get_one_tree","title":"Derive a phylogeny from a mega-tree — get_one_tree","text":"list species, generate phylogeny provided mega-tree. species mega-tree, grafted mega-tree three scenarioes.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_one_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive a phylogeny from a mega-tree — get_one_tree","text":"","code":"get_one_tree(   sp_list,   tree,   taxon,   scenario = c(\"at_basal_node\", \"random_below_basal\"),   show_grafted = FALSE,   tree_by_user = FALSE,   .progress = \"text\",   dt = TRUE )"},{"path":"https://daijiang.github.io/rtrees/reference/get_one_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive a phylogeny from a mega-tree — get_one_tree","text":"sp_list character vector data frame least three columns: species, genus, family. Species column holds species want phylogeny. can also two optional columns: close_sp close_genus. can specify closest species/genus species based expert knowledge. specified, new species grafted particular location. can also string vector taxon specified. Though probably better idea prepare data frame sp_list_df(). string vector can also format required Phylomatic (.e., family/genus/genus_sp). tree mega-tree class phylo list mega-trees class multiPhylo. Optional taxon specified, case, default mega-phylogeny (set 100 randomly selected posterior phylogenies) used (see documentations megatrees package). amphibian, mega-trees megatrees::tree_amphibian_n100. bee, mega-tree megatrees::tree_bee, megatrees::tree_bee_n100 option. bird, mega-trees megatrees::tree_bird_n100. fish, mega-tree megatrees::tree_fish_12k, megatrees::tree_fish_32k_n50 option. mammal, default mega-trees megatrees::tree_mammal_n100_vertlife, megatrees::tree_mammal_n100_phylacine option. plant, mega-tree megatrees::tree_plant_otl. reptile, mega-trees megatrees::tree_reptile_n100. shark, ray, chimaeras, mega-trees megatrees::tree_shark_ray_n100. taxon taxon species sp_list. Currently, can amphibian, bird, fish, mammal, plant, reptile, shark_ray. scenario insert species mega-tree? scenarioes, 1 species genus family, new node inserted middle point species' branch length new species attached new node. scenario = \"at_basal_node\", species attached basal node genus family mega-tree species genus. scenario = \"random_below_basal\", species attached randomly selected node basal node genus family mega-tree species genus. probability node selected proportional branch length. random sampling involved, may want run several times get collection derived phylogenies. show_grafted Whether indicate species grafted onto mega-tree. TRUE, * appended species name tip grafted within genus; ** appended grafted within family. tree_by_user mega-tree provided user? Default FALSE automatically set TRUE class tree multiPhylo since provide mega-trees . .progress Form progress bar, default text. dt Whether use data.table version bind tips bind_tip. default TRUE maybe slightly faster.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_one_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive a phylogeny from a mega-tree — get_one_tree","text":"phylogeny species required, class phylo.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Get one or multiple trees from megatree(s) — get_tree","title":"Get one or multiple trees from megatree(s) — get_tree","text":"taxa groups, multiple posterior megatrees. common task derive phylogeny (random subset ) megatrees.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get one or multiple trees from megatree(s) — get_tree","text":"","code":"get_tree(   sp_list,   tree,   taxon = NULL,   scenario = c(\"at_basal_node\", \"random_below_basal\"),   show_grafted = FALSE,   tree_by_user = FALSE,   mc_cores = future::availableCores() - 2,   .progress = \"text\",   fish_tree = c(\"timetree\", \"all-taxon\"),   mammal_tree = c(\"vertlife\", \"phylacine\"),   bee_tree = c(\"maximum-likelihood\", \"bootstrap\"),   dt = TRUE )"},{"path":"https://daijiang.github.io/rtrees/reference/get_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get one or multiple trees from megatree(s) — get_tree","text":"sp_list character vector data frame least three columns: species, genus, family. Species column holds species want phylogeny. can also two optional columns: close_sp close_genus. can specify closest species/genus species based expert knowledge. specified, new species grafted particular location. can also string vector taxon specified. Though probably better idea prepare data frame sp_list_df(). string vector can also format required Phylomatic (.e., family/genus/genus_sp). tree mega-tree class phylo list mega-trees class multiPhylo. Optional taxon specified, case, default mega-phylogeny (set 100 randomly selected posterior phylogenies) used (see documentations megatrees package). amphibian, mega-trees megatrees::tree_amphibian_n100. bee, mega-tree megatrees::tree_bee, megatrees::tree_bee_n100 option. bird, mega-trees megatrees::tree_bird_n100. fish, mega-tree megatrees::tree_fish_12k, megatrees::tree_fish_32k_n50 option. mammal, default mega-trees megatrees::tree_mammal_n100_vertlife, megatrees::tree_mammal_n100_phylacine option. plant, mega-tree megatrees::tree_plant_otl. reptile, mega-trees megatrees::tree_reptile_n100. shark, ray, chimaeras, mega-trees megatrees::tree_shark_ray_n100. taxon taxon species sp_list. Currently, can amphibian, bird, fish, mammal, plant, reptile, shark_ray. scenario insert species mega-tree? scenarioes, 1 species genus family, new node inserted middle point species' branch length new species attached new node. scenario = \"at_basal_node\", species attached basal node genus family mega-tree species genus. scenario = \"random_below_basal\", species attached randomly selected node basal node genus family mega-tree species genus. probability node selected proportional branch length. random sampling involved, may want run several times get collection derived phylogenies. show_grafted Whether indicate species grafted onto mega-tree. TRUE, * appended species name tip grafted within genus; ** appended grafted within family. tree_by_user mega-tree provided user? Default FALSE automatically set TRUE class tree multiPhylo since provide mega-trees . mc_cores Number cores parallel processing tree list large number trees. default number available cores minus 2. .progress Form progress bar, default text. fish_tree fish tree want use? \"timetree\" (default), smaller time tree 11638 species sequence data; \"-taxon\", 100 larger posterior phylogenies 31516 soecues. mammal_tree set mammal trees use? \"vertlife\" (default), 100 randomly selected posterior phylogenies provided Vertlife used; \"phylacine\", 100 randomly selected posterior phylogenies provided PHYLACINE used. bee_tree bee tree use? \"maximum-likelihood\" (default), single maximum likelihood tree used. \"bootstrap\", set 100 randomly selected posterior phylogenies used. trees provided Bee Tree Life. dt Whether use data.table version bind tips bind_tip. default TRUE maybe slightly faster.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get one or multiple trees from megatree(s) — get_tree","text":"phylogeny species required, class phylo; list phylogenies class multiPhylo depends input tree. Within phylogeny, grafted status species saved data frame named \"graft_status\".","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_tree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get one or multiple trees from megatree(s) — get_tree","text":"Derive phylogeny mega-tree list species, generate phylogeny multiple phylogenies provided mega-tree mega-trees. species mega-tree, grafted mega-tree two scenarios.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/get_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get one or multiple trees from megatree(s) — get_tree","text":"","code":"test_sp = c(\"Serrasalmus_geryi\", \"Careproctus_reinhardti\", \"Gobiomorphus_coxii\",  \"Periophthalmus_barbarus\", \"Prognichthys_glaphyrae\", \"Barathronus_bicolor\",  \"Knipowitschia_croatica\", \"Rhamphochromis_lucius\", \"Neolissochilus_tweediei\",  \"Haplochromis_nyanzae\", \"Astronesthes_micropogon\", \"Sanopus_reticulatus\") test_tree = get_tree(sp_list = test_sp,                      taxon = \"fish\",                      show_grafted = TRUE) #>  #> 6 species added at genus level (*)  #> 1 species have no co-family species in the mega-tree, skipped #> (if you know their family, prepare and edit species list with `rtrees::sp_list_df()` may help):  #> Barathronus_bicolor"},{"path":"https://daijiang.github.io/rtrees/reference/rm_stars.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove trailing * — rm_stars","title":"Remove trailing * — rm_stars","text":"Remove trailing *","code":""},{"path":"https://daijiang.github.io/rtrees/reference/rm_stars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove trailing * — rm_stars","text":"","code":"rm_stars(tree)"},{"path":"https://daijiang.github.io/rtrees/reference/rm_stars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove trailing * — rm_stars","text":"tree phylogeny generated get_tree(..., show_grafted = TRUE) trailing stars tip labels.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/rm_stars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove trailing * — rm_stars","text":"phylogeny removing trailing stars.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/rtrees-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetching phylogenies from mega-trees — rtrees-package","title":"Fetching phylogenies from mega-trees — rtrees-package","text":"facilitate generating phylogenies synthesis trees.","code":""},{"path":[]},{"path":"https://daijiang.github.io/rtrees/reference/rtrees-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fetching phylogenies from mega-trees — rtrees-package","text":"Daijiang Li daijianglee@gmail.com","code":""},{"path":"https://daijiang.github.io/rtrees/reference/sp_list_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a vector of species names to a data frame — sp_list_df","title":"Convert a vector of species names to a data frame — sp_list_df","text":"Convert vector species names data frame","code":""},{"path":"https://daijiang.github.io/rtrees/reference/sp_list_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a vector of species names to a data frame — sp_list_df","text":"","code":"sp_list_df(sp_list, taxon)"},{"path":"https://daijiang.github.io/rtrees/reference/sp_list_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a vector of species names to a data frame — sp_list_df","text":"sp_list string vector data frame least one column named \"species\". taxon taxon group species list. specified, species genus returned.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/sp_list_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a vector of species names to a data frame — sp_list_df","text":"data frame columns: species, genus, family (taxon specified).","code":""},{"path":"https://daijiang.github.io/rtrees/reference/sp_list_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a vector of species names to a data frame — sp_list_df","text":"","code":"sp_list_df(sp_list = c(\"Serrasalmus_geryi\", \"Careproctus_reinhardti\", \"Gobiomorphus_coxii\"),            taxon = \"fish\") #> # A tibble: 3 × 3 #>   species                genus        family        #>   <chr>                  <chr>        <chr>         #> 1 Serrasalmus_geryi      Serrasalmus  Serrasalmidae #> 2 Careproctus_reinhardti Careproctus  Liparidae     #> 3 Gobiomorphus_coxii     Gobiomorphus Eleotridae"},{"path":"https://daijiang.github.io/rtrees/reference/taxa_supported.html","id":null,"dir":"Reference","previous_headings":"","what":"Taxonomic groups supported — taxa_supported","title":"Taxonomic groups supported — taxa_supported","text":"Supported taxonomic groups mega-trees provided megatrees package.","code":""},{"path":"https://daijiang.github.io/rtrees/reference/taxa_supported.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taxonomic groups supported — taxa_supported","text":"","code":"taxa_supported"},{"path":"https://daijiang.github.io/rtrees/reference/taxa_supported.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Taxonomic groups supported — taxa_supported","text":"object class character length 8.","code":""}]
